<?php

class User
{
    private $id;
    private $status;
    private $type_id;
    private $usertype;
    private $username;
    private $email;
    private $pwd;
    private $deleted;

    public function __construct(string|int $in_id = 0)
    {
        if($in_id > 0)
        {
            $query = "SELECT u.*, ut.type_name 
                      FROM user u 
                      JOIN usertype ut ON u.ut_id = ut.ut_id 
                      WHERE user_id = :user_id;";
            $stmt  = PdoConnect::$connection->prepare($query);
            $stmt  ->bindParam(':user_id', $in_id);
            $stmt  ->execute();

            $result = $stmt->fetchAll();
            if(count($result) == 1)
            {
                $this->id       = $result[0]['user_id'];
                $this->status   = $result[0]['user_status'];
                $this->type_id  = $result[0]['ut_id'];
                $this->usertype = $result[0]['type_name'];
                $this->username = $result[0]['username'];
                $this->email    = $result[0]['email'];
                $this->pwd      = $result[0]['pwd'];
                $this->deleted  = $result[0]['deleted'];
            }
            elseif(count($stmt->fetchAll()) >= 2)
            {
                die("Fehler: Mehr als einen Datensatz gefunden!");
            }
            else
            {
                die("Fehler: Keinen Datensatz trotz ID gefunden!");
            }
        }
        else
        {
            //neuen Benutzer anlegen
            $this->id = 0;
            $this->deleted = 0;
        }
    }

    #private function create($in_type_id)
    private function create()
    {
        if($this->id > 0)
        {
            echo "Fehler: Create mit ID > 0 versucht!";
            return;
        }

        $query = "INSERT INTO user ( ut_id,  username,  email,  pwd)
                            VALUES (:ut_id, :username, :email, :pwd);";
        $stmt  = PdoConnect::$connection->prepare($query);
        $stmt  ->bindParam(":ut_id"   , $this->type_id);
        $stmt  ->bindParam(":username", $this->username);
        $stmt  ->bindParam(":email"   , $this->email);
        $stmt  ->bindParam(":pwd"     , $this->pwd);

        $stmt  ->execute();
    }

    private function update()
    {
        if($this->id < 1)
        {
            echo "Fehler: Update mit ID 0 versucht!";
            return;
        }

        $query = "UPDATE user  SET
                            user_status = :status,
                            ut_id       = :ut_id,
                            username    = :username,
                            email       = :email,
                            pwd         = :pwd,
                            deleted     = :deleted
                      WHERE user_id     = :user_id;";

        $stmt = PdoConnect::$connection->prepare($query);
        $stmt ->bindParam(":user_id"  , $this->id);
        $stmt ->bindParam(":status"   , $this->status);
        $stmt ->bindParam(":ut_id"    , $this->type_id);
        $stmt ->bindParam(":username" , $this->username);
        $stmt ->bindParam(":email"    , $this->email);
        $stmt ->bindParam(":pwd"      , $this->pwd);
        $stmt ->bindParam(":deleted"  , $this->deleted);

        $stmt ->execute();
    }

    #public function save($in_type_id = 1)
    public function save()
    {
        if($this->id > 0)
        {
            $this->update();
        }
        else
        {
            #$this->create($in_type_id);
            $this->create();
        }
    }

    public function del_it()
    {
        if($this->id < 1)
        {
            echo "Fehler: Delete mit ID = 0 versucht!";
            return;
        }
        $this->deleted = 1;

        $this->update();
    }

    public function login($in_username, $in_pwd)
    {
        $query = "SELECT u.*, ut.type_name FROM user u
                            JOIN usertype ut ON u.ut_id = ut.ut_id
                            WHERE username        = :username AND
                                  u.deleted       = 0 AND
                                  u.user_status   = 1;";
        $stmt = PdoConnect::$connection->prepare($query);
        $stmt ->bindParam(":username", $in_username);

        $stmt ->execute();

        $result = $stmt->fetchAll();
        
        if(count($result) != 1)
        {
            return false;
        }

        $stored_hashed_pwd = $result[0]['pwd'];

        $config = include 'config/config.php';
        $pepper = $config['pepper'];
        $pwd_peppered = hash_hmac("sha256", $in_pwd, $pepper);

        if(password_verify($pwd_peppered, $stored_hashed_pwd))
        {
            $update_query = "UPDATE user SET last_login = CURRENT_TIMESTAMP WHERE user_id = :id;";
            $update_stmt  = PdoConnect::$connection->prepare($update_query);
            $update_stmt  ->bindParam(':id', $result[0]['user_id']);
            $update_stmt  ->execute();
        
            $this->id       = $result[0]['user_id'];
            $this->type_id  = $result[0]['ut_id'];
            $this->usertype = $result[0]['type_name'];
            return $this->id;
        }
        else
        {
            
            return false;
        }    
        
    }

    public function check_if_username_exists($in_username)
    {
        $query = "SELECT * FROM user WHERE username = :username";
        $stmt  = PdoConnect::$connection->prepare($query);
        $stmt  ->bindParam(":username", $in_username);

        $stmt->execute();
        $result = $stmt->fetch();

        if($result)
        {
            return true;
        }
        return false;
    }

    public function check_if_email_exists($in_email)
    {
        $query = "SELECT * FROM user WHERE email = :email";
        $stmt  = PdoConnect::$connection->prepare($query);
        $stmt  ->bindParam(":email", $$in_email);

        $stmt->execute();
        $result = $stmt->fetch();

        if($result)
        {
            return true;
        }
        return false;
    }

    public function get_user_info_as_array()
    {
        if($this->id < 0)
        {
            die("Fehler: keine User Info vorhanden!");
        }
        $tmp_array = [];
        array_push($tmp_array, $this->status);
        array_push($tmp_array, $this->usertype);
        array_push($tmp_array, $this->username);
        array_push($tmp_array, $this->email);
        return $tmp_array;
    }

    public function getAll()
    {
        $temp_array = [];
        $query = "SELECT user_id FROM user WHERE deleted = 0;";
        foreach(PdoConnect::$connection->query($query) as $row)
        {
            array_push($temp_array, $row[0]);
        }
        return $temp_array;
    }

    function get_all_user_types()
    {
        $tmp_array = [];
        $query = "SELECT ut_id, type_name FROM usertype WHERE deleted = 0;";
        foreach(PdoConnect::$connection->query($query) as $row)
        {
            $tmp_arr = [];
            array_push($tmp_arr, $row[0]);
            array_push($tmp_arr, $row[1]);
            array_push($tmp_array, $tmp_arr);
        }
        return $tmp_array;
    }

    public function get_id()
    {
        return $this->id;
    }

    public function get_status()
    {
        return $this->status;
    }

    public function get_type_id()
    {
        return $this->type_id;
    }

    public function get_usertype()
    {
        return $this->usertype;
    }

    public function get_username()
    {
        return $this->username;
    }

    public function get_email()
    {
        return $this->email;
    }

    public function get_pwd()
    {
        return $this->pwd;
    }

    public function set_id($in_id)
    {
        $this->id = $in_id;
    }

    public function set_status($in_status)
    {
        $this->status = $in_status;
    }

    public function set_type_id($in_type_id)
    {
        $this->type_id = $in_type_id;
    }

    public function set_role($in_usertype)
    {
        $this->usertype = $in_usertype;
    }

    public function set_username($in_username)
    {
        $this->username = $in_username;
    }

    public function set_email($in_email)
    {
        $this->email = $in_email;
    }

    public function set_pwd($in_pwd)
    {
        $this->pwd = $in_pwd;
    }
}